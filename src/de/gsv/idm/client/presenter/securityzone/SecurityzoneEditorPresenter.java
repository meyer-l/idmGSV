package de.gsv.idm.client.presenter.securityzone;import java.util.ArrayList;import java.util.logging.Level;import com.google.gwt.core.client.GWT;import com.google.gwt.editor.client.SimpleBeanEditorDriver;import com.google.gwt.user.client.rpc.AsyncCallback;import com.google.gwt.user.client.ui.IsWidget;import com.sencha.gxt.data.shared.ListStore;import com.sencha.gxt.widget.core.client.event.SelectEvent;import com.sencha.gxt.widget.core.client.event.SelectEvent.HasSelectHandlers;import com.sencha.gxt.widget.core.client.event.SelectEvent.SelectHandler;import com.sencha.gxt.widget.core.client.info.Info;import de.gsv.idm.client.RpcController.DBController;import de.gsv.idm.client.RpcController.service.SecurityzoneRpcController;import de.gsv.idm.client.event.db.TransactionBufferEvent;import de.gsv.idm.client.event.db.securityzone.CreatedSecurityzoneEvent;import de.gsv.idm.client.event.db.securityzone.DeletedSecurityzoneEvent;import de.gsv.idm.client.presenter.general.GeneralEditorPresenter;import de.gsv.idm.client.transaction.UpdateTransaction;import de.gsv.idm.client.view.gsk.widgets.MeasureGridToGridChooser;import de.gsv.idm.client.view.securityzone.SecurityzoneEditor;import de.gsv.idm.shared.dto.MeasureDTO;import de.gsv.idm.shared.dto.SecurityzoneDTO;public class SecurityzoneEditorPresenter extends GeneralEditorPresenter<SecurityzoneDTO> {	public interface SecurityzoneEditorDisplay extends GeneralEditorDisplay<SecurityzoneDTO> {		void setAddMeasuresButtonText(String text);		HasSelectHandlers getAddMeasuresButtonClick();		ListStore<MeasureDTO> getMeasuresStore();		ListStore<MeasureDTO> getInheritedMeasuresStore();		HasSelectHandlers getUpButtonClick();		void setUpButtonText(String text);		void setUpButtonToolTip(String toolTip);		HasSelectHandlers getDownButtonClick();		void setDownButtonText(String text);		void setDownButtonToolTip(String toolTip);		void setOrderNumberVisible(Boolean enabled);	}	interface ItemDriver extends SimpleBeanEditorDriver<SecurityzoneDTO, SecurityzoneEditor> {	}	private ItemDriver itemDriver = GWT.create(ItemDriver.class);	private final SecurityzoneEditorDisplay editorDisplay;	private final SecurityzoneRpcController securityzoneService;	public SecurityzoneEditorPresenter(SecurityzoneRpcController securityzoneService,	        SecurityzoneEditorDisplay editorDisplay) {		super(securityzoneService, editorDisplay);		this.editorDisplay = editorDisplay;		this.securityzoneService = securityzoneService;	}	public SecurityzoneEditorPresenter(SecurityzoneEditorDisplay editorDisplay) {		this(DBController.getInstance().getSecurityzoneController(), editorDisplay);	}	@Override	public IsWidget go() {		itemDriver.initialize((SecurityzoneEditor) editorDisplay);		editorDisplay.setEnabled(false);		bindView();		return editorDisplay.asWidget();	}	private void bindView() {		editorDisplay.setAddMeasuresButtonText("Verlinkte Maßnahmen bearbeiten");		editorDisplay.setUpButtonToolTip("Schutzzone in der Ordnung nach unten verschieben."		        + " Eine Schutzzone erbt nur die Maßnahmen der untergeordneten Schutzzonen.");		editorDisplay.setDownButtonToolTip("Schutzzone in der Ordnung nach oben verschieben."		        + " Eine Schutzzone vererbt ihre Maßnahmen nur an übergeordnete Schutzzonen.");		editorDisplay.getAddMeasuresButtonClick().addSelectHandler(new SelectHandler() {			@Override			public void onSelect(SelectEvent event) {				new MeasureGridToGridChooser(editorDisplay.getMeasuresStore(), editorDisplay				        .getInheritedMeasuresStore());			}		});		editorDisplay.getUpButtonClick().addSelectHandler(new SelectHandler() {			@Override			public void onSelect(SelectEvent event) {				SecurityzoneDTO securityzone = itemDriver.flush();				final SecurityzoneDTO oldSecurityzone = securityzone.clone();				securityzone.setOrderNumber(securityzone.getOrderNumber() - 1);				securityzoneService.update(securityzone, new AsyncCallback<SecurityzoneDTO>() {					@Override					public void onFailure(Throwable caught) {						DBController.getLogger().log(Level.SEVERE,						        "Error while updating decrement Securityzone order number");					}					@Override					public void onSuccess(SecurityzoneDTO result) {						String text = result.getClassName() + " " + result.getLabel()						        + " wurde aktualisiert. (ID: " + result.getId() + ")";						TransactionBufferEvent event = new TransactionBufferEvent(						        new UpdateTransaction<SecurityzoneDTO>(generalRpcController,						                oldSecurityzone, result, text));						eventBus.fireEvent(event);						Info.display("RPC:", text);					}				});			}		});		editorDisplay.getDownButtonClick().addSelectHandler(new SelectHandler() {			@Override			public void onSelect(SelectEvent event) {				SecurityzoneDTO securityzone = itemDriver.flush();				final SecurityzoneDTO oldSecurityzone = securityzone.clone();				securityzone.setOrderNumber(securityzone.getOrderNumber() + 1);				securityzoneService.update(securityzone, new AsyncCallback<SecurityzoneDTO>() {					@Override					public void onFailure(Throwable caught) {						DBController.getLogger().log(Level.SEVERE,						        "Error while updateing increment Securityzone order number");					}					@Override					public void onSuccess(SecurityzoneDTO result) {						String text = result.getClassName() + " " + result.getLabel()						        + " wurde aktualisiert. (ID: " + result.getId() + ")";						TransactionBufferEvent event = new TransactionBufferEvent(						        new UpdateTransaction<SecurityzoneDTO>(generalRpcController,						                oldSecurityzone, result, text));						eventBus.fireEvent(event);						Info.display("RPC:", text);					}				});			}		});	}	public void doEdit(SecurityzoneDTO object) {		resetScrollBar();		referenceObject = object;		clonedEditObject = object.clone();		itemDriver.edit(object.clone());		editorDisplay.setSaveEnabled(true);		editorDisplay.setSaveAndNewEnabled(true);		editorDisplay.setDeleteEnabled(true);		editorDisplay.setOrderNumberVisible(object != null && object.getId() != null		        && object.getId() > 0);	}	@Override	public void doSave() {		SecurityzoneDTO flushed = itemDriver.flush();		if (clonedEditObject.getId() == null || flushed.getId()< 0) {			createObject(flushed);		} else {			updateObject(flushed, clonedEditObject.clone());		}	}	@Override	public void doDelete() {		final SecurityzoneDTO toDelete = itemDriver.flush();				if(toDelete != null && toDelete.getId() != null && toDelete.getId() > 0){			deleteObject(toDelete);		} else {			eventBus.fireEvent(new DeletedSecurityzoneEvent(toDelete));		}	}	@Override	public void doNew() {		SecurityzoneDTO newZone = new SecurityzoneDTO();		newZone.setMeasures(new ArrayList<MeasureDTO>());		newZone.setName("Neue Schutzzone");		newZone.setId(createTempId());		eventBus.fireEvent(new CreatedSecurityzoneEvent(newZone));		doEdit(newZone);	}	@Override    protected void fireDeletedEvent() {		eventBus.fireEvent(new DeletedSecurityzoneEvent(referenceObject));    }	@Override    protected SecurityzoneDTO getFlushedObject() {		return itemDriver.flush();    }		public boolean openChanges() {		if(clonedEditObject != null){			return itemDriver.isDirty();		} else {			return false;		}	        }}